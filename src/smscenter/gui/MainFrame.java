/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package smscenter.gui;

import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Desktop;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.MessageFormat;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.concurrent.ExecutionException;
import java.util.logging.Handler;
import java.util.logging.Level;
import java.util.logging.LogRecord;
import java.util.logging.Logger;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import org.smslib.GatewayException;
import org.smslib.TimeoutException;
import smscenter.gui.settings.Settings;

/**
 *
 * @author chtheis
 */
public class MainFrame extends javax.swing.JFrame {
    
    static final private String VERSION_STRING = "25.06.01";
    static final private String COPYRIGHT_STRING ="(C) 2025 Christoph Theis";
    
    smscenter.smsserver.SMSServer smsServer = null;
    smscenter.database.Database database = new smscenter.database.Database();  
    
    String title;

    private class ComboBoxLogRecord  {
        LogRecord record;

        public ComboBoxLogRecord(LogRecord record) {
            this.record = record;
        }

        @Override
        public String toString() {
            String date = java.text.DateFormat.getDateTimeInstance().format(new java.util.Date(record.getMillis()));
            String message;

            if (record.getMessage() != null)
                message = (new java.util.logging.SimpleFormatter()).formatMessage(record);
            else
                message = record.getThrown().getClass().getName() + ": " + record.getThrown().getLocalizedMessage();

            return "[" + date + "] " + message;
        }
    }

    /**
     * Creates new form MainFrame
     */
    @SuppressWarnings("OverridableMethodCallInConstructor")
    public MainFrame() {
        initComponents();

        myInitComponents();
        
        initLogging();
        
        title = getTitle();
        setTitle(title + " - STOPPED");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sndSMSPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        receiverTextField = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        smsTextTextArea = new javax.swing.JTextArea();
        remainingCharLabel = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        statusComboBox = new javax.swing.JComboBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        toolsMenu = new javax.swing.JMenu();
        configurationMenuItem = new javax.swing.JMenuItem();
        smsConfigurationMenuItem = new javax.swing.JMenuItem();
        sendSMSMenuItem = new javax.swing.JMenuItem();
        queryBalanceMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        smsserverMenuItem = new javax.swing.JCheckBoxMenuItem();
        helpMenu = new javax.swing.JMenu();
        manualMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("smscenter/gui/resources/SMSCenter"); // NOI18N
        jLabel1.setText(bundle.getString("Receiver:")); // NOI18N

        jLabel2.setText(bundle.getString("Text:")); // NOI18N

        smsTextTextArea.setColumns(20);
        smsTextTextArea.setRows(5);
        smsTextTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                smsTextTextAreaKeyTyped(evt);
            }
        });
        jScrollPane3.setViewportView(smsTextTextArea);

        remainingCharLabel.setText("160");

        javax.swing.GroupLayout sndSMSPanelLayout = new javax.swing.GroupLayout(sndSMSPanel);
        sndSMSPanel.setLayout(sndSMSPanelLayout);
        sndSMSPanelLayout.setHorizontalGroup(
            sndSMSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sndSMSPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sndSMSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sndSMSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3)
                    .addComponent(receiverTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                    .addComponent(remainingCharLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        sndSMSPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jScrollPane3, receiverTextField});

        sndSMSPanelLayout.setVerticalGroup(
            sndSMSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sndSMSPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sndSMSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(receiverTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sndSMSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(remainingCharLabel)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(bundle.getString("SMS Center")); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        toolsMenu.setText(bundle.getString("Tools")); // NOI18N

        configurationMenuItem.setText(bundle.getString("Configuration")); // NOI18N
        configurationMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configurationMenuItemActionPerformed(evt);
            }
        });
        toolsMenu.add(configurationMenuItem);

        smsConfigurationMenuItem.setText(bundle.getString("SMS Configuration")); // NOI18N
        smsConfigurationMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smsConfigurationMenuItemActionPerformed(evt);
            }
        });
        toolsMenu.add(smsConfigurationMenuItem);

        sendSMSMenuItem.setText(bundle.getString("Send SMS")); // NOI18N
        sendSMSMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSMSMenuItemActionPerformed(evt);
            }
        });
        toolsMenu.add(sendSMSMenuItem);

        queryBalanceMenuItem.setText(bundle.getString("Query Balance")); // NOI18N
        queryBalanceMenuItem.setEnabled(false);
        queryBalanceMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queryBalanceMenuItemActionPerformed(evt);
            }
        });
        toolsMenu.add(queryBalanceMenuItem);
        toolsMenu.add(jSeparator1);

        smsserverMenuItem.setText(bundle.getString("SMS Server")); // NOI18N
        smsserverMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smsserverMenuItemActionPerformed(evt);
            }
        });
        toolsMenu.add(smsserverMenuItem);

        jMenuBar1.add(toolsMenu);

        helpMenu.setText(bundle.getString("Help")); // NOI18N

        manualMenuItem.setText("Manual");
        manualMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manualMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(manualMenuItem);

        aboutMenuItem.setText(bundle.getString("About")); // NOI18N
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1177, Short.MAX_VALUE)
                    .addComponent(statusComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 557, Short.MAX_VALUE)
                .addGap(13, 13, 13)
                .addComponent(statusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Fortsetzung von initComponents mit anderen Mitteln
    private void myInitComponents() {                
        
        final Properties props = new Properties();
        try {
            File iniFile = findPath("SMSServer.conf");
            props.load(new FileInputStream(iniFile));
        } catch (IOException ex) {
            
        }
        
        if (! (new File("SMSCenter.pdf")).exists())
            manualMenuItem.setEnabled(false);
        
        final java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("smscenter/gui/resources/SMSCenter"); // NOI18N
        
        updateInterval = Settings.readGeneralSettings(props).getUpdateInterval();
        updateDelay = Settings.readGeneralSettings(props).getUpdateDelay();
                        
        phonePanel = new PhonePanel(database);
        incomingPanel = new IncomingPanel(database);
        outgoingPanel = new OutgoingPanel(database);
        schedulePanel = new SchedulesPanel(database);
        resultsPanel = new ResultsPanel(database);
        positionPanel = new PositionsPanel(database);
        groupsPanel = new GroupsPanel(database);

        jTabbedPane1.addTab(bundle.getString("Phone"), phonePanel); // NO18N
        jTabbedPane1.addTab(bundle.getString("Incoming"), incomingPanel); // NOI18N
        jTabbedPane1.addTab(bundle.getString("Outgoing"), outgoingPanel); // NOI18N
        jTabbedPane1.addTab(bundle.getString("Schedules"), schedulePanel); // NO18N
        jTabbedPane1.addTab(bundle.getString("Results"), resultsPanel); // NO18N  
        jTabbedPane1.addTab(bundle.getString("Positions"), positionPanel); // NO18N  
        jTabbedPane1.addTab(bundle.getString("Groups"), groupsPanel); // NO18N 
        
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        
        new javax.swing.SwingWorker<Boolean, Object>(){

            @Override
            protected Boolean doInBackground() throws Exception {
                return database.setConfiguration(props);
            }
            
            @Override
            protected void done() {
                javax.swing.SwingUtilities.invokeLater(new Runnable() {

                    @Override
                    public void run() {
                        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        
                        smsConfigurationMenuItem.setEnabled(database.isValidConnection());
                        
                        if (!database.isValidConnection()) {
                            javax.swing.JOptionPane.showMessageDialog(MainFrame.this, bundle.getString("Connection to database failed"));
                            configurationMenuItemActionPerformed(null);
                        }
                    }
                });
            }
        }.execute();
    }
    
    
    public static java.io.File findPath(String what) {
        File file = null;

        file = new File(System.getProperty("user.dir") + File.separator + what);

        if (!file.exists())
            file = new File(System.getenv("ALLUSERSPROFILE") + File.separator + "TTM" + File.separator + what);

/*        
        if (!file.exists())
            file = new File(System.getenv("APPDATA") + File.separator + "TTM" + File.separator + what);

        if (!file.exists())
            file = new File(System.getenv("LOCALAPPDATA") + File.separator + "TTM" + File.separator + what);

        if (!file.exists())
            return null;
*/

        if (!file.exists()) {
            try {
                file.createNewFile();
            } catch (java.io.IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                
                file = null;
            }
        }        
        
        return file;
    }
    
    private void initLogging() {
        Logger.getLogger("").addHandler(new Handler() {

            // synchronized, da merere gleichzeitig drauf zugreifen koennten
            @Override
            synchronized public void publish(LogRecord record) {
                if (record.getMessage() == null && record.getThrown() == null)
                    return;

                java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("smscenter/gui/resources/SMSCenter"); // NOI18N
                record.setResourceBundle(bundle);

                javax.swing.DefaultComboBoxModel model = (javax.swing.DefaultComboBoxModel) statusComboBox.getModel();
                model.insertElementAt(new ComboBoxLogRecord(record), 0);

                while (model.getSize() > 100)
                    model.removeElementAt(model.getSize() - 1);

                statusComboBox.setSelectedIndex(0);
                
                if (Level.SEVERE.intValue() <= record.getLevel().intValue()) {
                    statusComboBox.setForeground(java.awt.Color.RED);
                    statusComboBox.setFont(statusComboBox.getFont().deriveFont(0));                            
                } else if (Level.FINE.intValue() >= record.getLevel().intValue()) {
                    statusComboBox.setForeground(java.awt.Color.DARK_GRAY);
                    statusComboBox.setFont(statusComboBox.getFont().deriveFont(java.awt.Font.ITALIC));                                                
                } else {
                    statusComboBox.setForeground(java.awt.Color.BLACK);
                    statusComboBox.setFont(statusComboBox.getFont().deriveFont(0));                                                
                }
            }

            @Override
            public void flush() {
            }

            @Override
            public void close() throws SecurityException {
            }

        });


        Logger.getLogger("smscenter").setLevel(Level.INFO);

        statusComboBox.setRenderer(new javax.swing.DefaultListCellRenderer() {

            @Override
            public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                Component c = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);

                if (value == null)
                    return c;

                LogRecord record = ((ComboBoxLogRecord) value).record;

                if (Level.SEVERE.intValue() <= record.getLevel().intValue()) {
                    c.setForeground(java.awt.Color.RED);
                    c.setFont(c.getFont().deriveFont(0));
                } else if (Level.FINE.intValue() >= record.getLevel().intValue()) {
                    c.setForeground(java.awt.Color.DARK_GRAY);
                    c.setFont(c.getFont().deriveFont(java.awt.Font.ITALIC));
                } else {
                    c.setForeground(java.awt.Color.BLACK);
                    c.setFont(c.getFont().deriveFont(0));
                }

                return c;
            }
        });        
    }
    
    
    private void smsserverMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smsserverMenuItemActionPerformed
        queryBalanceMenuItem.setEnabled(smsserverMenuItem.isSelected());
        
        if (smsserverMenuItem.isSelected()) {
            FileInputStream f = null;
            try {
                Properties props = new Properties();
                if (System.getProperty("smsserver.configdir") != null) 
                    f = new FileInputStream(System.getProperty("smsserver.configdir") + "SMSServer.conf");
                else if (System.getProperty("smsserver.configfile") != null) 
                    f = new FileInputStream(System.getProperty("smsserver.configfile"));
                else 
                    f = new FileInputStream(findPath("SMSServer.conf"));
                
                props.load(f);

                smsServer = new smscenter.smsserver.SMSServer(props);
            
                org.smslib.AGateway gw = new org.smslib.AGateway("Test") {
                    int refCount = 0;

                    @Override
                    public boolean sendMessage(org.smslib.OutboundMessage msg) throws org.smslib.TimeoutException, GatewayException, java.io.IOException, InterruptedException
                    {
                        msg.setDispatchDate(new java.util.Date());
                        msg.setMessageStatus(org.smslib.OutboundMessage.MessageStatuses.SENT);
                        msg.setRefNo(Integer.toString(++refCount));
                        msg.setGatewayId(getGatewayId());
                        incOutboundMessageCount();
                        return true;
                    }

                    @Override
                    public int getQueueSchedulingInterval() {
                        return 200;
                    }
                };
                
                gw.setProtocol(org.smslib.AGateway.Protocols.TEXT);
                gw.setAttributes(org.smslib.AGateway.GatewayAttributes.SEND);
                gw.setInbound(false);
                gw.setOutbound(true);                
                // org.smslib.Service.getInstance().addGateway(gw);                

                new Thread(new Runnable() {

                    @Override
                    public void run() {
                        try {
                            Logger.getLogger(MainFrame.class.getName()).log(Level.INFO, "Starting SMS Server");                            
                            smsServer.run();
                            Logger.getLogger(MainFrame.class.getName()).log(Level.INFO, "SMS Server started"); 
                            
                            SwingUtilities.invokeLater(new Runnable() {

                                @Override
                                public void run() {
                                    setTitle(title + " - Running");
                                }
                                
                            });
                        } catch (Exception ex) {
                            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);                            
                        }
                    }
                    
                }, "smsserver").start();
                
            } catch (Exception ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            finally {
                try {
                    if (f != null)
                        f.close();
                } catch (Exception ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);                    
                }
            }
        } else {
            if (smsServer != null) {
                try {
                    new Thread(new Runnable() {

                        @Override
                        public void run() {
                            try {
                                Logger.getLogger(MainFrame.class.getName()).log(Level.INFO, "Stopping SMS Server");                            
                                smsServer.shutdown();  
                                smsServer = null;
                                
                                Logger.getLogger(MainFrame.class.getName()).log(Level.INFO, "SMS Server stopped");
                                
                                SwingUtilities.invokeLater(new Runnable() {

                                    @Override
                                    public void run() {
                                        setTitle(title + " - STOPPED");
                                    }
                                });
                            } catch (Exception ex) {
                                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }                        
                    }, "shutdown").start();
                } catch (Exception ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);                   
                }
            }
        }
    }//GEN-LAST:event_smsserverMenuItemActionPerformed

    private void sendSMSMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendSMSMenuItemActionPerformed
        int remaining = 160 - smsTextTextArea.getText().length();
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("smscenter/gui/resources/SMSCenter"); 
        String msg = new MessageFormat(bundle.getString("remainingCharLabel"), Locale.ENGLISH).format(new Object[] {remaining >= 0 ? remaining : ""});
        remainingCharLabel.setText(msg);
        
        int ret = javax.swing.JOptionPane.showConfirmDialog(this, sndSMSPanel, "Send Message", javax.swing.JOptionPane.OK_CANCEL_OPTION);
        if (ret == javax.swing.JOptionPane.OK_OPTION) {
            database.sendMessage(receiverTextField.getText(), smsTextTextArea.getText(), true);
        }
        
    }//GEN-LAST:event_sendSMSMenuItemActionPerformed

    private void configurationMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configurationMenuItemActionPerformed
        final Component parent = this;
        final Properties props = new Properties();
        try (FileInputStream fis = new FileInputStream(findPath("SMSServer.conf"))) {
            props.load(fis);
        } catch (IOException ex) {
            
        }
        
        ConfigurationPanel cfgPanel = new ConfigurationPanel();
        cfgPanel.loadProperties(props);
        int ret = javax.swing.JOptionPane.showConfirmDialog(this, cfgPanel, "Configuration", javax.swing.JOptionPane.OK_CANCEL_OPTION);
        if (ret == javax.swing.JOptionPane.OK_OPTION) {
            cfgPanel.writeProperties(props);
            try {
                FileOutputStream fos = new FileOutputStream(findPath("SMSServer.conf"));
                props.store(fos, null);
                updateInterval = Settings.readGeneralSettings(props).getUpdateInterval();
                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                
                new javax.swing.SwingWorker<Boolean, Object>() {

                    @Override
                    protected Boolean doInBackground() throws Exception {
                        return database.setConfiguration(props);
                    }
                    
                    @Override
                    protected void done() {
                        try {
                            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                            
                            smsConfigurationMenuItem.setEnabled(database.isValidConnection());
                            
                            if (!get()) {
                                java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("smscenter/gui/resources/SMSCenter"); 
                                String msg = bundle.getString("Connection to database failed");
                                javax.swing.JOptionPane.showMessageDialog(parent, msg);
                            }
                        } catch (InterruptedException ex) {
                            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (ExecutionException ex) {
                            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }.execute();
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_configurationMenuItemActionPerformed

    private void queryBalanceMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queryBalanceMenuItemActionPerformed
        final List<smscenter.smsserver.gateways.AGateway> gwList = smsServer.getGwList();
        
        new Thread(new Runnable() {
            @Override
            public void run() {
                Map<String, Float> balances = new java.util.HashMap<>();
                for (smscenter.smsserver.gateways.AGateway gw : gwList) {
                    try {
                        float balance = gw.getGateway().queryBalance();
                        balances.put(gw.getDescription(), balance);
                    } catch (TimeoutException | GatewayException | IOException | InterruptedException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                if (balances.isEmpty())
                    return;

                final StringBuilder sb = new StringBuilder();
                for (String s : balances.keySet()) {
                    sb.append(s).append(": ").append(balances.get(s)).append("\n");
                }

                javax.swing.SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        javax.swing.JOptionPane.showMessageDialog(MainFrame.this, sb.toString() );
                    }
                });
            }
        }).start();
    }//GEN-LAST:event_queryBalanceMenuItemActionPerformed

    private void smsTextTextAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_smsTextTextAreaKeyTyped
        int remaining = 160 - smsTextTextArea.getText().length();
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("smscenter/gui/resources/SMSCenter"); 
        String msg = new MessageFormat(bundle.getString("remainingCharLabel"), Locale.ENGLISH).format(new Object[] {remaining});
        remainingCharLabel.setText(msg);
        if (remaining < 0)
            remainingCharLabel.setForeground(Color.red);
        else
            remainingCharLabel.setForeground(Color.black);
    }//GEN-LAST:event_smsTextTextAreaKeyTyped

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        String aboutMessage = 
                "<html>" +
                    "<b>Counter Manager</b><br>" +
                    "Version " + VERSION_STRING + "<br>" +
                    COPYRIGHT_STRING + 
                "</html>";
        
        JOptionPane.showMessageDialog(this, aboutMessage, "About", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        java.util.prefs.Preferences prefs = Preferences.userRoot().node("/de/smscenter");
        prefs.putInt("left", getBounds().x);
        prefs.putInt("top", getBounds().y);
        try {
            prefs.flush();
        } catch (BackingStoreException ex) {
            
        }
    }//GEN-LAST:event_formWindowClosing

    private void manualMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manualMenuItemActionPerformed
        try {
            // Show pdf with default app
            File pdfManual = new File("SMSCenter.pdf");
            if (!pdfManual.exists())
                return;
            
            Desktop.getDesktop().open(pdfManual);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_manualMenuItemActionPerformed

    private void smsConfigurationMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smsConfigurationMenuItemActionPerformed
        if (!database.isValidConnection())
            return;
        
        SMSConfigurationPanel cfgPanel = new SMSConfigurationPanel();
        cfgPanel.setWelcomeMsg(database.getWelcomeMsg());
        cfgPanel.setSponsorLine(database.getSponsorLine());

        int ret = javax.swing.JOptionPane.showConfirmDialog(this, cfgPanel, "SMS Configuration", javax.swing.JOptionPane.OK_CANCEL_OPTION);
        if (ret == javax.swing.JOptionPane.OK_OPTION) {
            database.setWelcomeMessage(cfgPanel.getWelcomeMsg());
            database.setSponsorLine(cfgPanel.getSponsorLine());
        }
        
    }//GEN-LAST:event_smsConfigurationMenuItemActionPerformed

    @Override
    public List<java.awt.Image> getIconImages() {
        // Icon from http://www.comfi.com/telecom-icons/
        java.util.ArrayList<java.awt.Image> imageList = new java.util.ArrayList<>();
        imageList.add(java.awt.Toolkit.getDefaultToolkit().getImage(getClass().getResource("/smscenter/gui/resources/SMSCenter.png")));
        return imageList;
    }
    
    public void sendUpdateSchedules(Set<Integer> plSet) {
        schedulePanel.update(plSet);
    }
    
    
    public boolean isSMSServerRunning() {
        return smsServer != null;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
/*            
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
*/            
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                javax.swing.JFrame frame = new MainFrame();
                
                java.util.prefs.Preferences prefs = Preferences.userRoot().node("/de/smscenter");
                int x = prefs.getInt("left", 0);
                int y = prefs.getInt("top", 0);        
                frame.setLocation(x, y);

                frame.setVisible(true);
            }
        });
    }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem configurationMenuItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JMenuItem manualMenuItem;
    private javax.swing.JMenuItem queryBalanceMenuItem;
    private javax.swing.JTextField receiverTextField;
    private javax.swing.JLabel remainingCharLabel;
    private javax.swing.JMenuItem sendSMSMenuItem;
    private javax.swing.JMenuItem smsConfigurationMenuItem;
    private javax.swing.JTextArea smsTextTextArea;
    private javax.swing.JCheckBoxMenuItem smsserverMenuItem;
    private javax.swing.JPanel sndSMSPanel;
    private javax.swing.JComboBox statusComboBox;
    private javax.swing.JMenu toolsMenu;
    // End of variables declaration//GEN-END:variables

    private PhonePanel phonePanel;
    private IncomingPanel incomingPanel;
    private OutgoingPanel outgoingPanel;
    private SchedulesPanel schedulePanel;
    private ResultsPanel resultsPanel;
    private PositionsPanel positionPanel;
    private GroupsPanel groupsPanel;
    
    static int updateInterval = 5;
    static int updateDelay = 60;
}
