/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package smscenter.gui.settings;

import java.util.List;
import java.util.Properties;
import javax.swing.event.ChangeEvent;
import javax.swing.event.TableModelEvent;

/**
 *
 * @author chtheis
 */
public class GatewaySettingsPanel extends SettingsPanel {

    private List<GatewaySettings> gateways;
    
    /**
     * Creates new form GatewaySettingsPanel
     */
    public GatewaySettingsPanel() {
        initComponents();
        
        gatewayTable.getModel().addTableModelListener(new javax.swing.event.TableModelListener() {

            @Override
            public void tableChanged(TableModelEvent e) {
                for (int row = e.getFirstRow(); row <= e.getLastRow(); row++) {
                    int col = e.getColumn();

                    if (col != 0)
                        return;

                    Object value = gatewayTable.getValueAt(row, 0);
                    if ( !(value instanceof GatewaySettings.GatewayType) )
                        return;

                    while (row >= gateways.size())
                        gateways.add(null);

                    GatewaySettings.GatewayType type = (GatewaySettings.GatewayType) value;
                    if (type.equals(GatewaySettings.GatewayType.None) && gateways.get(row) == null)
                        return;

                    if (gateways.get(row) != null && type.equals(gateways.get(row).getType()))
                        return;

                    gateways.set(row, GatewaySettings.allocate(type));     
                }
            }
        });
    }
    
    
    @Override
    public void loadProperties(Properties props) {
        gateways = Settings.readGateways(props);
        
        for (GatewaySettings gateway : gateways) {
            ((javax.swing.table.DefaultTableModel) gatewayTable.getModel()).addRow(new Object[] {gateway.getType(), "..."});
        }        
    }

    @Override
    public void writeProperties(Properties props) {
        Settings.writeGateways(gateways, props);
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        gatewayTable = new javax.swing.JTable() {
            public javax.swing.table.TableCellRenderer getCellRenderer(int row, int col) {
                Object value = getModel().getValueAt(row, col);
                if (col == 1)
                value = "...";
                if (value == null)
                return super.getCellRenderer(row, col);
                else if (value instanceof Enum)
                return super.getCellRenderer(row, col);
                else
                return super.getCellRenderer(row, col);
            }

            public javax.swing.table.TableCellEditor getCellEditor(int row, int col) {
                Object value = getModel().getValueAt(row, col);
                if (value == null)
                return super.getCellEditor(row, col);
                else if (value instanceof Boolean)
                return getDefaultEditor(Boolean.class);
                else if (value instanceof Enum) {
                    Object[] values = value.getClass().getEnumConstants();
                    return new javax.swing.DefaultCellEditor(new javax.swing.JComboBox(values));
                }
                else
                return super.getCellEditor(row, col);
            }
        };
        addGatewayButton = new javax.swing.JButton();

        gatewayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Type", "..."
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        gatewayTable.setFillsViewportHeight(true);
        gatewayTable.getTableHeader().setReorderingAllowed(false);
        gatewayTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gatewayTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(gatewayTable);
        gatewayTable.getColumnModel().getColumn(1).setMinWidth(30);
        gatewayTable.getColumnModel().getColumn(1).setPreferredWidth(30);
        gatewayTable.getColumnModel().getColumn(1).setMaxWidth(30);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("smscenter/gui/resources/SMSCenter"); // NOI18N
        addGatewayButton.setText(bundle.getString("Add Gateway")); // NOI18N
        addGatewayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addGatewayButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addGatewayButton)
                        .addGap(0, 306, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addGatewayButton))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void gatewayTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gatewayTableMouseClicked
        if (gatewayTable.columnAtPoint(evt.getPoint()) == 1) {
            int row = gatewayTable.rowAtPoint(evt.getPoint());

            GatewaySettings.GatewayType type = (GatewaySettings.GatewayType) gatewayTable.getValueAt(row, 0);
            if (type == null || type == GatewaySettings.GatewayType.None)
                return;

            GatewaySettings gw = gateways.get(row);
            if (gw == null) {
                gw = GatewaySettings.allocate(type);
            }

            if (gw == null)
                return;

            SettingsPanel panel = gw.getPanel();
            if (panel == null)
                return;
            
            panel.loadProperties(null);
            
            int ret = javax.swing.JOptionPane.showConfirmDialog(
                this, panel, java.util.ResourceBundle.getBundle("smscenter/gui/resources/SMSCenter")
                        .getString("configurationString"), javax.swing.JOptionPane.OK_CANCEL_OPTION,
                javax.swing.JOptionPane.PLAIN_MESSAGE);

            if (ret == javax.swing.JOptionPane.OK_OPTION) {
                panel.writeProperties(null);
                gateways.set(ret, gw);
            }
        }
    }//GEN-LAST:event_gatewayTableMouseClicked

    private void addGatewayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addGatewayButtonActionPerformed
        ((javax.swing.table.DefaultTableModel) gatewayTable.getModel()).addRow(new Object[] {GatewaySettings.GatewayType.None, "..."});
        gateways.add(null);
    }//GEN-LAST:event_addGatewayButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addGatewayButton;
    private javax.swing.JTable gatewayTable;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
